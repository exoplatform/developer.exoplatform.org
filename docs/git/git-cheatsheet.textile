---
layout: page
title: "Git - Cheat Sheet"
tags: [git,cheatsheet]
group: git
---
{% include JB/setup %}


<div class="row">
  <div class="span6">
    <ul class="thumbnails">
      <li class="span12">
        <div class="thumbnail">
          <img src="git-overview.png" alt="Git Big Picture">
        </div>
      </li>
    </ul>
  </div>
</div>

<div class="row">
  <div class="span6">

h2. Create

*From existing data*

{% highlight sh %}
cd <DIRECTORY>
git init
git add .
git commit
{% endhighlight %}

*From existing repo*

{% highlight sh %}
git clone <EXISTING_REPO> <NEW_REPO>
{% endhighlight %}

default protocol is ssh
EXISTING_REPO is a local path or a remote URL, for examples :
* _path_ : ~/repository.git
* _ssh_ : git@host:repository.git
* _http(s)_ : https://username@host/repository.git

h2. Update

*Fetch latest changes from origin*

{% highlight sh %}
git fetch
{% endhighlight %}

this does not merge them

*Pull latest changes from origin*

{% highlight sh %}
git pull
{% endhighlight %}

does a fetch followed by a merge

In case of conflict, resolve the conflict and

{% highlight sh %}
git am --resolve
{% endhighlight %}

h2. Track Files

*Start tracking files*

{% highlight sh %}
git add <FILES>
{% endhighlight %}

*Interactive selection of files to track*

{% highlight sh %}
git add -i
{% endhighlight %}

*Move/Rename a file*

{% highlight sh %}
git mv <OLD_NAME> <NEW_NAME>
git mv <OLD_PATH> <NEW_PATH>
{% endhighlight %}

*Stop tracking and delete files in working directories*

{% highlight sh %}
git rm <FILES>
{% endhighlight %}

*Stop tracking but keep files in working directory*

{% highlight sh %}
git rm --cached <FILES>
{% endhighlight %}

h2. Commit

*Commit all local changes*

{% highlight sh %}
git commit -a
{% endhighlight %}

h2. Publish

*Prepare a patch for other developers*

{% highlight sh %}
git format-patch origin
{% endhighlight %}

*Push changes to origin*

{% highlight sh %}
git push origin <BRANCH>
{% endhighlight %}

Use option @--all@ to push all local references (branches, tags..), @--tags@ to push all tags,
@--force@ to push non fast-forward changes (must be avoided to not risk to loose commits)

*Make a version or milestone*

{% highlight sh %}
git tag <TAG_NAME>
{% endhighlight %}

  </div>
  <div class="span6">

h2. Browse

*Files changed in working directory*

{% highlight sh %}
git status
{% endhighlight %}

*Changes to tracked files*

{% highlight sh %}
git diff
{% endhighlight %}

*Changes between ID1 and ID2*

{% highlight sh %}
git diff <ID1> <ID2>
{% endhighlight %}

*History of changes*

{% highlight sh %}
git log
{% endhighlight %}

*Who changed what and when in a file*

{% highlight sh %}
git blame <FILE>
{% endhighlight %}

*A commit identified by ID*

{% highlight sh %}
git show <ID>
{% endhighlight %}

*A specific file from a specific ID*

{% highlight sh %}
git diff <ID>:<FILE>
{% endhighlight %}

*Search for patterns*

{% highlight sh %}
git grep <PATTERN> <PATH>
{% endhighlight %}

h2. Branch

*List all branches*

{% highlight sh %}
git branch
{% endhighlight %}

*Switch to the BRANCH branch*

{% highlight sh %}
git checkout <BRANCH>
{% endhighlight %}

*Merge branch B1 into branch B2*

{% highlight sh %}
git checkout <B2>
git merge <B1>
{% endhighlight %}

*Create branch based on HEAD*

{% highlight sh %}
git branch <BRANCH>
{% endhighlight %}

*Create branch based on another*

{% highlight sh %}
git branch <NEW> <BASE>
{% endhighlight %}

*Delete a local branch*

{% highlight sh %}
git branch -d <BRANCH>
{% endhighlight %}

*Delete a remote branch*

{% highlight sh %}
git push <origin> :<BRANCH>
{% endhighlight %}

h2. Revert

*Return to the last committed state*

{% highlight sh %}
git checkout -f | git reset --hard
{% endhighlight %}

you cannot undo a hard reset

*Revert the last commit*

{% highlight sh %}
git revert HEAD
{% endhighlight %}

Creates a new commit

*Revert specific commit*

{% highlight sh %}
git revert <ID>
{% endhighlight %}

Creates a new commit

*Fix the last commit*

{% highlight sh %}
git commit -a --amend
{% endhighlight %}

after editing the broken files

*Checkout the ID version of a file*

{% highlight sh %}
git checkout <ID> <FILE>
{% endhighlight %}

*Restoring lost commits*

So, you just did a git reset --hard HEAD^ and threw out your last commit. Well, it turns out you really did need those changes. You’ll never be able to implement that algorithm that perfectly twice, so you need it back. Don’t fear, git should still have your commit. When you do a reset, the commit you threw out goes to a “dangling” state. It’s still in git’s datastore, waiting for the next garbage collection to clean it up. So unless you’ve ran a git gc since you tossed it, you should be in the clear to restore it.

{% highlight sh %}
git cherry-pick ORIG_HEAD
{% endhighlight %}

*HEAD vs ORIG_HEAD*

ORIG_HEAD is previous state of HEAD, set by commands that have possibly dangerous behavior, to be easy to revert them. It is less useful now that Git has reflog: HEAD@{1} is roughly equivalent to ORIG_HEAD (HEAD@{1} is always last value of HEAD, ORIG_HEAD is last value of HEAD before dangerous operation).

*Removing a File from Every Commit (Powerful filter-branch)*

This occurs fairly commonly. Someone accidentally commits a huge binary file with a thoughtless git add ., and you want to remove it everywhere. Perhaps you accidentally committed a file that contained a password, and you want to make your project open source. filter-branch is the tool you probably want to use to scrub your entire history. To remove a file named passwords.txt from your entire history, you can use the --tree-filter option to filter-branch:

{% highlight sh %}
git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
{% endhighlight %}

The --tree-filter option runs the specified command after each checkout of the project and then recommits the results. In this case, you remove a file called passwords.txt from every snapshot, whether it exists or not. If you want to remove all accidentally committed editor backup files, you can run something like git filter-branch --tree-filter 'rm -f *~' HEAD.
Using --index-filter with git rm yields a significantly faster version. Like with using rm filename, git rm --cached filename will fail if the file is absent from the tree of a commit. If you want to "completely forget" a file, it does not matter when it entered history, so we also add --ignore-unmatch:

{% highlight sh %}
git filter-branch --index-filter 'git rm --cached --ignore-unmatch passwords.txt' HEAD
{% endhighlight %}

  </div>
</div>

<div class="row">
  <div class="span12">
    <div class="well">

h2. Sources

* "Alex Zeitler Git cheat sheet":https://github.com/AlexZeitler/gitcheatsheet
* "Jan Krueger Git cheat sheet":http://jan-krueger.net/git
* "Git Ready":http://gitready.com/

    </div>
  </div>
</div>
